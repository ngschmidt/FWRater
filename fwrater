#!/usr/bin/env python3

# Firewall Rater Tool (Prototype)
# Nicholas Schmidt
# 12 Feb 2015

#Includes go here
import ipaddress, sys, getopt

#Imports go here
from ipaddress import ip_address
from ipaddress import ip_network
from sys import argv


#Functions go here

###LIST INTERPRETERS GO HERE###


##IPTABLES HERE##


#Process IPTables Chain
# takes a string, preferably multiline, but you want the entire chain.
#Returns a list, including the action, protocol, src/dest, score

def processIPTablesChain (IPTables_input):
    #if it's not a list, make it a list
    if type(IPTables_input) is list:
        IPTables_data= IPTables_input
    else:
        IPTables_data= IPTables_input.splitlines()
    
    #find the iptables chain - input verification step 1
    if not IPTables_data[0].startswith("Chain"):
        return 0

    #find the iptables header - input verification step 2
    if not IPTables_data[1].startswith("target"):
        return 1

    #after input verification for the chain and header is done, proceed to verify there are actual entries
    if len(IPTables_data) < 3 :
        return 2

    return_list = []
    return_list.append([IPTables_data[0].split()[1],"","","",""])
    #iterate through the entries, skipping chain/header line, proceed to process entries.
    #anywhere is assumed to be 0.0.0.0/0 as it's a keyword and that's what it means.
    #insert header line to returned list
    for iter_loop in range(len(IPTables_data)):
        temp_var=IPTables_data[iter_loop]
        if temp_var.startswith("Chain"):
            continue
        if temp_var.startswith("target"):
            continue
        if len(temp_var.split()) < 5:
            continue
        srcIP=""
        dstIP=""
        if temp_var.split()[3] == "anywhere":
            srcIP= ip_network("0.0.0.0/0")
        else:
            srcIP= ip_network(temp_var.split()[3])
        if temp_var.split()[4] == "anywhere":
            dstIP= ip_network("0.0.0.0/0")
        else:
            dstIP= ip_network(temp_var.split()[4])
        if temp_var.split()[0] == "DROP":
            return_list.append(["DROP",temp_var.split()[1],srcIP,dstIP,scoreEntry(srcIP,dstIP,temp_var.split()[1],.00000000000000000001)])
        elif temp_var.split()[0] == "ACCEPT" or temp_var.split()[0] == "LOG":
            return_list.append(["PERMIT",temp_var.split()[1],srcIP,dstIP,scoreEntry(srcIP,dstIP,temp_var.split()[1],1)])
        else:
            return_list.append(["UNK",temp_var.split()[1],srcIP,dstIP,scoreEntry(srcIP,dstIP,temp_var.split()[1],1)])
    return return_list


##IPTables Read##

def readIPTablesOutput(iptables_data):
    return_list = []
    temp_list = []
    temp_list = splitByToken(iptables_data,"Chain")
    for i in temp_list:
        return_list.append(processIPTablesChain(i))
    return return_list


###UTILITY FUNCTIONS GO HERE###
#Score Function
#Takes 2 ip networks, a protocol ID, protocol port (if applicable, if not 0) and a modifier (if applicable, if not 1)

def scoreEntry (srcIP, destIP, proto, scoreMOD):
    known_protocols = { "udp" : 0.5,
            "tcp" : 0.5,
            "icmp" : 0.1}
    addressCountMod = srcIP.num_addresses*destIP.num_addresses*scoreMOD
    try:
        return addressCountMod*known_protocols[proto]
    except KeyError:
        return addressCountMod*1


#Print 2d array improvement

def print2DList (list_2d):
    for i in range(len(list_2d)):
        print(list_2d[i])


#Print 3d array improvement

def print3DList (list_3d):
    for i in range(len(list_3d)):
        if type(list_3d[i]) is list:
            print2DList(list_3d[i])


# print the first member of a list

def printListMembersHeader (list_input):
    viable_options = []
    if type(list_input) is list:
        for i in list_input:
            if type(i) is list:
                viable_options.append(i[0][0])
    print(viable_options)
    print("ACLs Found:")
    print(" ".join(viable_options))
    choice = input("Choose an ACL:  ")
    if choice in viable_options:
        print("Print specific ACL: " + choice)

#print ACL function - takes the standard 5-wide list output

def printACL (list_acl):
    for i in list_acl:
        if type(i) is not list:
            continue
        if len(i) is not 5:
            continue
        if i[0] is "PERMIT":
            print("Rule PERMIT type " + i[1] + " with SRC " + str(i[2]) + \
                    " and DEST " + str(i[3]) + "received a score of " + str(i[4]))
        elif i[0] is "DENY":
            print("Rule DENY type " + i[1] + " with SRC " + str(i[2]) + \
                    " and DEST " + str(i[3]) + "received a score of " + str(i[4]))
        elif i[0] is "UNK":
            print("Rule UNK type " + i[1] + " with SRC " + str(i[2]) + \
                    " and DEST " + str(i[3]) + "received a score of " + str(i[4]))
        else:
            print("ACL NAME: " + i[0] + " Entries")


#print ACLs function - handle all of the ACLs!!

def printACLs (list_acls):
    for i in list_acls:
        if type(i) is list:
            printACL(i)


#helpful print ACLs function - let the user pick what ACL!

def printHelpfulACLs (list_acls):
    if type(list_acls) is list:
        printListMembersHeader(list_acls)


###IO GOES HERE###


#Open a file <file_name> if it exists. Return file as a string

def fileRead (filename_to_read):
    try:
        file_return_io = open(filename_to_read,"r")
        file_return_list = file_return_io.readlines()
        file_return_io.close()
        return file_return_list
    except OSError:
        print("Invalid filename: " + filename_to_read)
        return 0


#process script arguments

def processScriptArgs():
    type_of_ACL=''
    input_file=''
    is_helpful=''
    #get options from argv
    try:
        options_from_argv, args_unused = getopt.gnu_getopt(sys.argv[1:],"i:t:p")
    except getopt.GetoptError as error_code:
        print(str(error_code))
        print("Invalid command!")
        print("Usage example: fwrater -i <input file> -t <ACL Type> <-p>")
    #handle options parsed by getopt
    for switch_to_parse, arg_to_switch in options_from_argv:
        if switch_to_parse == "-i":
            input_file=fileRead(arg_to_switch)
        elif switch_to_parse == "-t":
            type_of_ACL=arg_to_switch
        elif switch_to_parse == "-p":
            is_helpful="true"
        else:
            print("Could not identify switch " + switch_to_parse)
    #now, to do something with the variables gathered.
    if input_file is not "" and input_file is not 0:
        if type_of_ACL == "IPTables":
            if is_helpful != "true":
                printACLs(readIPTablesOutput(input_file))
            else:
                printHelpfulACLs(readIPTablesOutput(input_file))
        else:
            print("Invalid ACL Type detected! Type passed by command: " + type_of_ACL)
            print("Types supported:")
            print("IPTables")


#split list by token - used primarily for iptables -L sorting

def splitByToken(list_to_split,list_token):
    return_list = []
    list_temp = []
    for i in list_to_split:
        if i.startswith(list_token) and list_temp:
            return_list.append(list_temp[:])
            list_temp = []
        list_temp.append(i)
    return_list.append(list_temp)
    return return_list


###MAIN FUNCTIONALITY GOES HERE###

processScriptArgs()
#printACLs(readIPTablesOutput(readFileFromArgv()))
